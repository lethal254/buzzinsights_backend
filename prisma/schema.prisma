generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model SubReddit {
  id           Int       @id @default(autoincrement())
  userId       String?
  orgId        String?
  name         String
  createdAt    DateTime  @default(now())
  isActive     Boolean   @default(true)
  keywords     String[]  @default([])
  lastIngested DateTime?
  updatedAt    DateTime  @updatedAt

  @@unique([userId, name])
  @@unique([orgId, name])
}

model Preferences {
  id                        Int       @id @default(autoincrement())
  userId                    String?   @unique(map: "Preferences_userId_unique")
  orgId                     String?   @unique
  ingestionSchedule         String?
  ingestionActive           Boolean   @default(false)
  commentGrowthThreshold    Float     @default(2.0)
  createdAt                 DateTime  @default(now())
  emails                    String[]  @default([])
  enabled                   Boolean   @default(true)
  issueThreshold            Int       @default(0)
  lastNotified              DateTime?
  sentimentThreshold        Float     @default(0)
  timeWindow                Int       @default(24)
  triggerCategorization     Boolean   @default(false)
  updatedAt                 DateTime  @default(now()) @updatedAt
  volumeThresholdMultiplier Float     @default(1.5)
}

model RedditPost {
  id                    String          @id
  title                 String
  content               String
  author                String
  createdUtc            BigInt
  score                 Int
  numComments           Int
  lastUpdated           BigInt
  needsProcessing       Boolean         @default(true)
  processingPriority    Int             @default(0)
  category              String?
  product               String?
  sameIssuesCount       Int?            @default(0)
  sameDeviceCount       Int?            @default(0)
  solutionsCount        Int?            @default(0)
  updateIssueMention    Int?            @default(0)
  updateResolvedMention Int?            @default(0)
  authorProfilePhoto    String?
  imageUrl              String?
  orgId                 String?
  thumbnail             String?
  userId                String?
  labels                String[]        @default([])
  permalink             String?
  sentimentCategory     String?
  sentimentScore        Float?
  comments              RedditComment[]

  @@index([userId])
  @@index([orgId])
}

model RedditComment {
  id              String          @id
  postId          String
  parentCommentId String?
  author          String
  content         String
  createdUtc      BigInt
  score           Int
  lastUpdated     BigInt
  labels          String[]        @default([])
  parentComment   RedditComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         RedditComment[] @relation("CommentReplies")
  post            RedditPost      @relation(fields: [postId], references: [id])

  @@index([postId])
}

model FeedbackCategory {
  id          Int      @id @default(autoincrement())
  userId      String?
  orgId       String?
  name        String
  description String?
  keywords    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
  @@unique([orgId, name])
}

model ProductCategory {
  id          Int      @id @default(autoincrement())
  userId      String?
  orgId       String?
  name        String
  description String?
  keywords    String[]
  versions    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
  @@unique([orgId, name])
}

model NotificationHistory {
  id           Int      @id @default(autoincrement())
  userId       String?
  orgId        String?
  postIds      String[]
  category     String
  product      String?
  issueCount   Int
  sentAt       DateTime @default(now())
  emailsSentTo String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([orgId])
  @@index([sentAt])
}

model WindowMetrics {
  id                    Int      @id @default(autoincrement())
  userId                String?
  orgId                 String?
  timestamp             DateTime @default(now())
  totalPosts            Int
  totalComments         Int
  totalUpvotes          Int
  topTrendingPosts      Json
  categoryTrends        Json
  sentimentAnalysis     Json
  sameIssuesCount       Int
  sameDeviceCount       Int
  solutionsCount        Int
  updateIssueMention    Int
  updateResolvedMention Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([orgId])
  @@index([timestamp])
}

model Chat {
  id        String    @id
  title     String
  userId    String?
  orgId     String?
  createdAt DateTime  @default(now())
  Message   Message[]

  @@index([orgId])
  @@index([userId])
}

model Message {
  id        String   @id
  chatId    String
  content   String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  Chat      Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId])
}

enum Role {
  user
  assistant
}
